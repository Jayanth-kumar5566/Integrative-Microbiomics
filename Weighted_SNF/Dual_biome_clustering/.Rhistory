library("SNFtool")
library("vegan")
b_data=read.csv("./../../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../../Data/virus.csv",row.names = 1)
v_data>5
sum[v_data>5]
sum(v_data>5)
colSums(v_data>5)
10/217
z=10/217
z=colSums(v_data>=10)
z
z=colSums(v_data>0)
z=colSums(v_data>0)
z>=10
z[z>=10]
class(z[z>=10])
as.data.frame(z[z>=10])
row.names(as.data.frame(z[z>=10]))
#Filter and finding the weights
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10]))
print(sel_col)
}
#Filter and finding the weights
all_d=list(b_data,f_data,v_data)
count<-1
for (d in all_d){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
all_d[count]<-all_d[count][,c(sel_col)]
count<-count+1
}
count
all_d[1]
all_d[1][,sel_col]
sel_col
(all_d[1])[,sel_col]
(all_d[1])[,c(sel_col)]
(all_d[1])[,as.vector(sel_col)]
#Filter and finding the weights
all_d=list(b_data,f_data,v_data)
count<-1
for (d in all_d){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
all_d[count]<-d[,c(sel_col)]
count<-count+1
}
all_d
all_d[1]
#Filter and finding the weights
all_d=list(type="data.frame",length=3)
count<-1
for (d in all_d){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
all_d[count]<-d[,c(sel_col)]
count<-count+1
}
#Filter and finding the weights
all_d=list(type="data.frame",length=3)
count<-1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
all_d[count]<-d[,c(sel_col)]
count<-count+1
}
all_d[1]
?list
#Filter and finding the weights
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
print(sel_col)
}
#Filter and finding the weights
list_sel=list()
#Filter and finding the weights
list_sel=list()
count=1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
print(sel_col)
list_sel[[count]]<-sel_col
count=count+1
}
list_sel
b_data<-b_data[,list_sel[[1]]]
library("SNFtool")
library("vegan")
source("function_snf.R")
b_data=read.csv("./../../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../../Data/virus.csv",row.names = 1)
#Filter and finding the weights
list_sel=list()
count=1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
#print(sel_col)
list_sel[[count]]<-sel_col
count=count+1
}
b_data<-b_data[,list_sel[[1]]]
f_data<-f_data[,list_sel[[2]]]
v_data<-f_data[,list_sel[[3]]]
v_data<-v_data[,list_sel[[3]]]
?del
?delete
library("SNFtool")
library("vegan")
source("function_snf.R")
b_data=read.csv("./../../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../../Data/virus.csv",row.names = 1)
#Filter and finding the weights
list_sel=list()
count=1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
#print(sel_col)
list_sel[[count]]<-sel_col
count=count+1
}
b_data<-b_data[,list_sel[[1]]]
f_data<-f_data[,list_sel[[2]]]
v_data<-v_data[,list_sel[[3]]]
remove(d,list_sel,count,sel_col,z)
b_dsim=vegdist(b_data,method='bray',diag=TRUE,upper=TRUE)
f_dsim=vegdist(f_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim=vegdist(v_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim[is.nan(v_dsim)]<-0 #As disimilarity is zero if both patients dont have any virus
W1=(as.matrix(b_dsim)-1)*-1
W2=(as.matrix(f_dsim)-1)*-1
W3=(as.matrix(v_dsim)-1)*-1
weight_b=dim(b_data)[2]
weight_b
weight_b=dim(b_data)[2]
weight_f=dim(b_data)[2]
weight_v=dim(b_data)[2]
weight_b=dim(b_data)[2]
weight_f=dim(f_data)[2]
weight_v=dim(v_data)[2]
weights_snf=list(c(weight_b,weight_f),c(weight_f,weight_v),c(weight_b,weight_v))
weights_snf
library("SNFtool")
library("vegan")
source("function_snf.R")
library("reticulate")
use_python("/usr/local/bin/python")
source_python("sil.py")
b_data=read.csv("./../../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../../Data/virus.csv",row.names = 1)
#Filter and finding the weights
list_sel=list()
count=1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
#print(sel_col)
list_sel[[count]]<-sel_col
count=count+1
}
b_data<-b_data[,list_sel[[1]]]
f_data<-f_data[,list_sel[[2]]]
v_data<-v_data[,list_sel[[3]]]
remove(d,list_sel,count,sel_col,z)
b_dsim=vegdist(b_data,method='bray',diag=TRUE,upper=TRUE)
f_dsim=vegdist(f_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim=vegdist(v_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim[is.nan(v_dsim)]<-0 #As disimilarity is zero if both patients dont have any virus
W1=(as.matrix(b_dsim)-1)*-1
W2=(as.matrix(f_dsim)-1)*-1
W3=(as.matrix(v_dsim)-1)*-1
weight_b=dim(b_data)[2]
weight_f=dim(f_data)[2]
weight_v=dim(v_data)[2]
names=c("b+f","f+v","b+v")
weights_snf=list(c(weight_b,weight_f),c(weight_f,weight_v),c(weight_b,weight_v))
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
sil_values=c()
for (i in 1:217){
W = SNF_weighted(x,i,20,weight = weights_snf[[count]])
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
print(paste(c(i,z),sep = " "))
labels=spectralClustering(W,z)
sil_values<-c(sil_values,silhouette_score(W,labels))
}
tuned_k<-which.max(sil_values)
print(tuned_k)
count<-count+1
}
library("SNFtool")
library("vegan")
source("function_snf.R")
library("reticulate")
use_python("/usr/local/bin/python")
source_python("sil.py")
b_data=read.csv("./../../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../../Data/virus.csv",row.names = 1)
#Filter and finding the weights
list_sel=list()
count=1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
#print(sel_col)
list_sel[[count]]<-sel_col
count=count+1
}
b_data<-b_data[,list_sel[[1]]]
f_data<-f_data[,list_sel[[2]]]
v_data<-v_data[,list_sel[[3]]]
remove(d,list_sel,count,sel_col,z)
b_dsim=vegdist(b_data,method='bray',diag=TRUE,upper=TRUE)
f_dsim=vegdist(f_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim=vegdist(v_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim[is.nan(v_dsim)]<-0 #As disimilarity is zero if both patients dont have any virus
W1=(as.matrix(b_dsim)-1)*-1
W2=(as.matrix(f_dsim)-1)*-1
W3=(as.matrix(v_dsim)-1)*-1
weight_b=dim(b_data)[2]
weight_f=dim(f_data)[2]
weight_v=dim(v_data)[2]
names=c("b+f","f+v","b+v")
weights_snf=list(c(weight_b,weight_f),c(weight_f,weight_v),c(weight_b,weight_v))
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
sil_values=c()
for (i in 1:217){
W = SNF_weighted(x,i,20,weight = weights_snf[[count]])
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
sil_values<-c(sil_values,silhouette_score(W,labels))
}
tuned_k<-which.max(sil_values)
print(tuned_k)
count<-count+1
}
k<-c(2,1,1)
#k<-c(13,5,4) #from above
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
W = SNF(x,k[count],20)
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
lab=as.data.frame(labels,row.names = row.names(b_data))
write.csv(lab,paste('./results/',names[count],"_labels",".csv",sep=''))
write.csv(W,paste('./results/',names[count],"_matrix",".csv",sep=''))
count=count+1
}
#k<-c(13,5,4) #from above
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
W = SNF(x,k[count],20)
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
lab=as.data.frame(labels,row.names = row.names(b_data))
write.csv(lab,paste('./results/',names[count],"_labels",".csv",sep=''))
write.csv(W,paste('./results/',names[count],"_matrix",".csv",sep=''))
count=count+1
}
#k<-c(13,5,4) #from above
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
W = SNF(x,k[count],20)
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
lab=as.data.frame(labels,row.names = row.names(b_data))
write.csv(lab,paste('./results/',names[count],"_labels",".csv",sep=''))
write.csv(W,paste('./results/',names[count],"_matrix",".csv",sep=''))
count=count+1
}
k
#k<-c(13,5,4) #from above
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
W = SNF_weighted(x,k[count],20,weight = weights_snf[[count]])
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
lab=as.data.frame(labels,row.names = row.names(b_data))
write.csv(lab,paste('./results/',names[count],"_labels",".csv",sep=''))
write.csv(W,paste('./results/',names[count],"_matrix",".csv",sep=''))
count=count+1
}
library("SNFtool")
#k<-c(13,5,4) #from above
count<-1
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
W = SNF_weighted(x,k[count],20,weight = weights_snf[[count]])
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
lab=as.data.frame(labels,row.names = row.names(b_data))
write.csv(lab,paste('./results/',names[count],"_labels",".csv",sep=''))
write.csv(W,paste('./results/',names[count],"_matrix",".csv",sep=''))
count=count+1
}
k
names=c("b+f","f+v","b+v")
weights_snf=list(c(weight_b,weight_f),c(weight_f,weight_v),c(weight_b,weight_v))
library("SNFtool")
library("vegan")
source("function_snf.R")
library("reticulate")
use_python("/usr/local/bin/python")
source_python("sil.py")
b_data=read.csv("./../../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../../Data/virus.csv",row.names = 1)
#Filter and finding the weights
list_sel=list()
count=1
for (d in list(b_data,f_data,v_data)){
z=colSums(d>0)
sel_col=row.names(as.data.frame(z[z>=10])) #In 5% patients prevalent
#print(sel_col)
list_sel[[count]]<-sel_col
count=count+1
}
b_data<-b_data[,list_sel[[1]]]
f_data<-f_data[,list_sel[[2]]]
v_data<-v_data[,list_sel[[3]]]
remove(d,list_sel,count,sel_col,z)
b_dsim=vegdist(b_data,method='bray',diag=TRUE,upper=TRUE)
f_dsim=vegdist(f_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim=vegdist(v_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim[is.nan(v_dsim)]<-0 #As disimilarity is zero if both patients dont have any virus
W1=(as.matrix(b_dsim)-1)*-1
W2=(as.matrix(f_dsim)-1)*-1
W3=(as.matrix(v_dsim)-1)*-1
weight_b=dim(b_data)[2]
weight_f=dim(f_data)[2]
weight_v=dim(v_data)[2]
names=c("b+f","f+v","b+v")
weights_snf=list(c(weight_b,weight_f),c(weight_f,weight_v),c(weight_b,weight_v))
count<-1
k<-c()
tmp_k<-list()
for (x in list(list(W1,W2),list(W2,W3),list(W1,W3))){
print(names[count])
sil_values=c()
for (i in 1:217){
W = SNF_weighted(x,i,20,weight = weights_snf[[count]])
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
sil_values<-c(sil_values,silhouette_score(W,labels))
}
tmp_k[[count]]<-sil_values
tuned_k<-which.max(sil_values)
k<-c(k,tuned_k)
print(tuned_k)
count<-count+1
}
tmp_k
[[2]]
tmp_k[[2]]
tmp_k[[3]]
