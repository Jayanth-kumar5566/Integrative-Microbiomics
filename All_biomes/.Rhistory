library("SNFtool")
library("vegan")
source("modified_functions.R")
b_data=read.csv("./../Data/bacteria.csv",row.names = 1)
f_data=read.csv("./../Data/fungi.csv",row.names = 1)
v_data=read.csv("./../Data/virus.csv",row.names = 1)
v_a<-colSums(v_data)
for (i in colnames(v_data)){
if (v_a[[i]]==0){v_data[[i]]<-NULL}
}
b_dsim=vegdist(b_data,method='bray',diag=TRUE,upper=TRUE)
f_dsim=vegdist(f_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim=vegdist(v_data,method='bray',diag=TRUE,upper=TRUE)
v_dsim[is.nan(v_dsim)]<-0 #As disimilarity is zero if both patients dont have any virus
W1=(as.matrix(b_dsim)-1)*-1
W2=(as.matrix(f_dsim)-1)*-1
W3=(as.matrix(v_dsim)-1)*-1
for (i in 1:217){
W = SNF(list(W1,W2,W3),i,20)
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
print(paste(c(i,z),sep = " "))
labels=spectralClustering(W,z)
write.csv(labels,paste(c("Tuning_k/labels",i,".csv"),collapse = ""))
write.csv(W,paste(c('Tuning_k/matrix',i,".csv"),collapse = ""))
}
W = SNF(list(W1,W2,W3),7,20)
z=estimateNumberOfClustersGivenGraph(W)
r
z
labels=spectralClustering(W,z)
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
W = SNF(list(W1,W2,W3),7,20)
z=estimateNumberOfClustersGivenGraph(W)$`Eigen-gap best`
labels=spectralClustering(W,z)
print(table(labels))
lab=as.data.frame(labels,row.names = row.names(b_data))
write.csv(lab,paste("./results/labels",".csv",sep=''))
write.csv(W,paste("./results/matrix",".csv",sep=''))
library(dunn.test)
X_data=read.csv("./../Data/clinical_attr.csv",row.names = 1)
count<-1
labels=read.csv(paste("./results/labels.csv",sep=""),row.names = 1)
Y_data=merge(X_data,labels,by="row.names",all.y = TRUE)
row.names(Y_data)<-Y_data$Row.names;Y_data$Row.names<-NULL
Y_data$x<-factor(Y_data$labels)
Y_data$labels<-NULL
Y_data$Matching<-NULL
Y_data$Status<-NULL
for (i in colnames(Y_data)){print(i);print(class(Y_data[[i]]));print(summary(Y_data[[i]]))}
Y_data$Gender..Male.0..Female.1.<-factor(Y_data$Gender..Male.0..Female.1.)
Y_data$Smoking.status..Past.0..Current.1..Never.2.<-factor(Y_data$Smoking.status..Past.0..Current.1..Never.2.)
Y_data$Ethinicity..CHinese.0..malay.1..indian.2..european.3..vietnamese.4..burmese.5..pakistani.6..<- NULL
Y_data$Broncoodialator..Yes.0..No.1..<-factor(Y_data$Broncoodialator..Yes.0..No.1..)
Y_data$Inhaled.corticosteroids..Yes.0..No.1.<-factor(Y_data$Inhaled.corticosteroids..Yes.0..No.1.)
Y_data$Mucolytic..Yes.0..No.1.<-factor(Y_data$Mucolytic..Yes.0..No.1.)
Y_data$Long.term.antibiotics..Yes.0..No.1.<-factor(Y_data$Long.term.antibiotics..Yes.0..No.1.)
Y_data$Antifungal..Yes.0..No.1.<-factor(Y_data$Antifungal..Yes.0..No.1.)
Y_data$Oral.steroids..Yes.0..No.1.<-factor(Y_data$Oral.steroids..Yes.0..No.1.)
Y_data$Pneumococcal.vaccine..Yes.0..No.1.<-factor(Y_data$Pneumococcal.vaccine..Yes.0..No.1.)
Y_data$Influenza.vaccine..Yes.0..No.1.<-factor(Y_data$Influenza.vaccine..Yes.0..No.1.)
Y_data$Pseudomonas.aeruginosa.status..by.qPCR...positive.0..negative.1.<-factor(Y_data$Pseudomonas.aeruginosa.status..by.qPCR...positive.0..negative.1.)
dif<-list()
sink("Dunn-test.txt")
for (i in 1:80){
if(class(Y_data[,i])=="integer" | class(Y_data[,i])=="numeric"){
form=as.formula(paste(names(Y_data)[i],"x",sep="~"))
t=kruskal.test(form,data=Y_data)
#Multiply the p-value value by 2 to account for both side testing
dif[[colnames(Y_data)[i]]]<-(t$p.value)
#Dunn test
print(colnames(Y_data)[i])
d_t=dunn.test(Y_data[[i]],Y_data$x,method = 'bh',alpha=0.05,kw=FALSE,list = TRUE,table = FALSE,altp = TRUE)
}
else{
# For categorical data comparision
print(colnames(Y_data)[i])
f<-fisher.test(Y_data[[i]],Y_data$x,simulate.p.value = TRUE)
dif[[colnames(Y_data)[i]]]<-(f$p.value)
if(f$p.value<0.05){
#Dunns test
print(colnames(Y_data)[i])
pop1=subset(Y_data,x==1)
pop2=subset(Y_data,x==2)
pop3=subset(Y_data,x==3)
#pop4=subset(Y_data,x==4)
#d_t=dunn.test(Y_data[[i]],Y_data$x,method = 'bh',alpha=0.05,kw=FALSE,list = TRUE,table = FALSE,altp = TRUE)
#d_t=dunn.test(x=list(pop1[,i],pop2[,i],pop3[,i],pop4[,i]),method = 'bh',alpha=0.05,kw=FALSE,list = TRUE,table = FALSE,altp = TRUE)
d_t=dunn.test(x=list(pop1[,i],pop2[,i],pop3[,i]),method = 'bh',alpha=0.05,kw=FALSE,list = TRUE,table = FALSE,altp = TRUE)
}
}
}
sink()
#Choosing factors with Alpha value of 0.05
ch_dif<-dif[dif<0.05]
sel=names(ch_dif)
print(sel)
pop1=subset(Y_data,x==1)
pop2=subset(Y_data,x==2)
pop3=subset(Y_data,x==3)
sink("table.csv")
for (i in sel){
if(class(pop1[[i]])=="integer" | class(pop1[[i]])=="numeric"){
x=paste(i,median(pop1[[i]],na.rm = TRUE),var(pop1[[i]],na.rm = TRUE),median(pop2[[i]],na.rm = TRUE),var(pop2[[i]],na.rm = TRUE),median(pop3[[i]],na.rm = TRUE),var(pop3[[i]],na.rm = TRUE),ch_dif[[i]],sep=",")
print(x)
}
else{
x=paste(i,toString(table(pop1[[i]])),toString(table(pop2[[i]])),toString(table(pop3[[i]])),ch_dif[[i]],sep=",")
print(x)
}
}
sink()
